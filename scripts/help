#!/bin/bash
#
# Help script to show docstrings
. _utils

#######################################
# Help script to show docstrings
# Arguments:
#   file_name?: string
# Outputs:
#   Writes help information to terminal
#   Always targets scripts in the same directory as this help script
#######################################

# Get script description from file
get_script_description() {
    local file="$1"
    if [ -f "$file" ] && [ -r "$file" ]; then
        # Look for the main docstring (first descriptive comment after shebang and empty lines)
        local desc=$(grep -E '^# ' "$file" | grep -v '^#!/' | head -n 1 | sed 's/^# //')
        if [ -n "$desc" ]; then
            echo "$desc"
        else
            echo "No description available"
        fi
    else
        echo "File not readable"
    fi
}

# Display help for all scripts
display_help() {
    echo -e "${BBLUE}Available Scripts:${NC}"
    echo "=================="
    
    # Get the directory where this help script is located
    local script_dir=$(get_script_dir)
    local dir_name=$(basename "$script_dir")
    
    echo -e "${GRAY}Scripts directory: $script_dir${NC}"
    echo ""
    
    # Find all executable files in the scripts directory
    local found_scripts=false
    
    for file in "$script_dir"/*; do
        # Skip if not a file or not executable
        if [ ! -f "$file" ] || [ ! -x "$file" ]; then
            continue
        fi
        
        # Skip utility files
        local basename_file=$(basename "$file")
        if [[ "$basename_file" == "_utils" || "$basename_file" == "_bash_template" || "$basename_file" == "help" ]]; then
            continue
        fi
        
        found_scripts=true
        local desc=$(get_script_description "$file")
        echo -e "${YELLOW}$basename_file${NC}: $desc"
    done
    
    if [ "$found_scripts" = false ]; then
        echo -e "${YELLOW}No executable scripts found in scripts directory${NC}"
    fi
    
    echo ""
    echo -e "${CYAN}Usage: help [script_name]${NC}"
    echo -e "${CYAN}Example: help backup${NC}"
}

# Display detailed help for specific script
display_help_full() {
    local script_name="$1"
    local script_dir=$(get_script_dir)
    local script_path="$script_dir/$script_name"
    
    if [ ! -f "$script_path" ]; then
        error_exit "Script not found: $script_name (searched in: $script_dir)"
    fi
    
    if [ ! -x "$script_path" ]; then
        echo -e "${YELLOW}Warning: $script_name is not executable${NC}"
    fi
    
    echo -e "${BBLUE}Detailed help for: $script_name${NC}"
    echo "================================"
    echo -e "${GRAY}Script location: $script_path${NC}"
    echo ""
    
    # Show script description
    local desc=$(get_script_description "$script_path")
    echo -e "${YELLOW}Description:${NC} $desc"
    
    # Show usage if available
    local usage=$(grep -E '^# Usage:' "$script_path" | head -n 1 | sed 's/^# Usage: //')
    if [ -n "$usage" ]; then
        echo -e "${YELLOW}Usage:${NC} $usage"
    fi
    
    # Show arguments if available
    local args=$(grep -E '^# Arguments:' "$script_path" -A 5 | grep -E '^# ' | sed 's/^# //')
    if [ -n "$args" ]; then
        echo -e "${YELLOW}Arguments:${NC}"
        echo "$args"
    fi
    
    # Show first few lines of script for context
    echo -e "${YELLOW}Script preview:${NC}"
    head -n 20 "$script_path" | grep -E '^[^#]' | head -n 5
}

# Main function
main() {
    if [ -z "$1" ]; then
        display_help
    else
        display_help_full "$1"
    fi
}

# Execute main with arguments
main "$@"
