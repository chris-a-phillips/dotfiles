#!/bin/bash

# Configuration Manager for Dotfiles
# This script helps manage different configurations for the dotfiles setup

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CONFIGS_DIR="$SCRIPT_DIR/configs"

print_status() {
  echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
  echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
  echo -e "${RED}✗${NC} $1"
}

print_info() {
  echo -e "${BLUE}ℹ${NC} $1"
}

print_header() {
  echo -e "\n${PURPLE}=== $1 ===${NC}"
}

# Show available configurations
list_configs() {
  print_header "Available Configurations"
  for config in "$CONFIGS_DIR"/*.json; do
    if [[ -f "$config" ]]; then
      local name=$(basename "$config" .json)
      local description=$(jq -r '.description' "$config" 2>/dev/null || echo "No description")
      echo "  $name: $description"
    fi
  done
}

# Show configuration details
show_config() {
  local config_name="$1"
  local config_file="$CONFIGS_DIR/${config_name}.json"
  
  if [[ ! -f "$config_file" ]]; then
    print_error "Configuration '$config_name' not found"
    exit 1
  fi
  
  print_header "Configuration: $config_name"
  
  local name=$(jq -r '.name' "$config_file")
  local description=$(jq -r '.description' "$config_file")
  local brewfile=$(jq -r '.brewfile' "$config_file")
  
  echo "Name: $name"
  echo "Description: $description"
  echo "Brewfile: $brewfile"
  
  echo -e "\nFeatures:"
  local features=$(jq -r '.features | to_entries[] | "  \(.key): \(.value)"' "$config_file")
  echo "$features"
  
  echo -e "\nAdditional Packages:"
  local brews=$(jq -r '.packages.additional_brews[]?' "$config_file" 2>/dev/null || echo "None")
  local casks=$(jq -r '.packages.additional_casks[]?' "$config_file" 2>/dev/null || echo "None")
  
  echo "  Brews: $brews"
  echo "  Casks: $casks"
}

# Create a new configuration
create_config() {
  local config_name="$1"
  local config_file="$CONFIGS_DIR/${config_name}.json"
  
  if [[ -f "$config_file" ]]; then
    print_error "Configuration '$config_name' already exists"
    exit 1
  fi
  
  print_header "Creating New Configuration: $config_name"
  
  read -p "Description: " description
  read -p "Brewfile name (e.g., Brewfile-$config_name): " brewfile
  
  # Create the configuration JSON
  cat > "$config_file" << EOF
{
  "name": "$(echo "$config_name" | sed 's/.*/\u&/')",
  "description": "$description",
  "brewfile": "$brewfile",
  "features": {
    "core_tools": true,
    "development": true,
    "productivity": false,
    "cloud_tools": false,
    "extensive_fonts": false,
    "remote_development": false,
    "unity_development": false,
    "gaming": false
  },
  "packages": {
    "additional_brews": [],
    "additional_casks": [
      "alt-tab",
      "font-hack-nerd-font",
      "hiddenbar",
      "itsycal"
    ],
    "additional_casks": [
      "alt-tab",
      "font-hack-nerd-font",
      "hiddenbar",
      "itsycal"
    ]
  },
  "macos_defaults": {
    "enable": false,
    "settings": {}
  },
  "git_config": {
    "enable": true,
    "prompt_for_credentials": true
  },
  "ssh_setup": {
    "enable": false,
    "key_type": "ed25519"
  },
  "additional_tools": {
    "lazygit": false,
    "powerlevel10k": true,
    "tmux_plugins": true,
    "neovim_lazyvim": false
  }
}
EOF
  
  print_status "Configuration created: $config_file"
  print_info "Edit the configuration file to customize your setup"
}

# Compare configurations
compare_configs() {
  local config1="$1"
  local config2="$2"
  local file1="$CONFIGS_DIR/${config1}.json"
  local file2="$CONFIGS_DIR/${config2}.json"
  
  if [[ ! -f "$file1" ]] || [[ ! -f "$file2" ]]; then
    print_error "One or both configurations not found"
    exit 1
  fi
  
  print_header "Comparing $config1 vs $config2"
  
  echo "Features:"
  local features1=$(jq -r '.features | to_entries[] | "\(.key): \(.value)"' "$file1" | sort)
  local features2=$(jq -r '.features | to_entries[] | "\(.key): \(.value)"' "$file2" | sort)
  
  echo "  $config1:"
  echo "$features1" | sed 's/^/    /'
  echo "  $config2:"
  echo "$features2" | sed 's/^/    /'
  
  echo -e "\nAdditional Packages:"
  local brews1=$(jq -r '.packages.additional_brews[]?' "$file1" 2>/dev/null || echo "")
  local brews2=$(jq -r '.packages.additional_brews[]?' "$file2" 2>/dev/null || echo "")
  
  echo "  $config1 brews: $brews1"
  echo "  $config2 brews: $brews2"
}

# Validate configuration
validate_config() {
  local config_name="$1"
  local config_file="$CONFIGS_DIR/${config_name}.json"
  
  if [[ ! -f "$config_file" ]]; then
    print_error "Configuration '$config_name' not found"
    exit 1
  fi
  
  print_header "Validating Configuration: $config_name"
  
  # Check if jq can parse the JSON
  if jq empty "$config_file" 2>/dev/null; then
    print_status "JSON syntax is valid"
  else
    print_error "Invalid JSON syntax"
    exit 1
  fi
  
  # Check required fields
  local required_fields=("name" "description" "brewfile" "features" "packages")
  for field in "${required_fields[@]}"; do
    if jq -e ".$field" "$config_file" >/dev/null 2>&1; then
      print_status "Field '$field' exists"
    else
      print_error "Missing required field: $field"
    fi
  done
  
  # Check if brewfile exists
  local brewfile=$(jq -r '.brewfile' "$config_file")
  local brewfile_path="$SCRIPT_DIR/$brewfile"
  if [[ -f "$brewfile_path" ]]; then
    print_status "Brewfile exists: $brewfile"
  else
    print_warning "Brewfile not found: $brewfile_path"
  fi
  
  print_status "Configuration validation complete"
}

# Show usage
show_usage() {
  echo "Configuration Manager for Dotfiles"
  echo ""
  echo "Usage: $0 <command> [options]"
  echo ""
  echo "Commands:"
  echo "  list                    List all available configurations"
  echo "  show <config>           Show details of a configuration"
  echo "  create <config>         Create a new configuration"
  echo "  compare <config1> <config2>  Compare two configurations"
  echo "  validate <config>       Validate a configuration file"
  echo "  help                    Show this help message"
  echo ""
  echo "Examples:"
  echo "  $0 list"
  echo "  $0 show personal"
  echo "  $0 create gaming"
  echo "  $0 compare personal work"
  echo "  $0 validate work"
}

# Main function
main() {
  case "${1:-help}" in
    list)
      list_configs
      ;;
    show)
      if [[ -z "$2" ]]; then
        print_error "Please specify a configuration name"
        exit 1
      fi
      show_config "$2"
      ;;
    create)
      if [[ -z "$2" ]]; then
        print_error "Please specify a configuration name"
        exit 1
      fi
      create_config "$2"
      ;;
    compare)
      if [[ -z "$2" ]] || [[ -z "$3" ]]; then
        print_error "Please specify two configuration names"
        exit 1
      fi
      compare_configs "$2" "$3"
      ;;
    validate)
      if [[ -z "$2" ]]; then
        print_error "Please specify a configuration name"
        exit 1
      fi
      validate_config "$2"
      ;;
    help|--help|-h)
      show_usage
      ;;
    *)
      print_error "Unknown command: $1"
      show_usage
      exit 1
      ;;
  esac
}

main "$@" 