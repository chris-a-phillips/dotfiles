#!/bin/bash
#
# Interactive git reset --hard through mini cli
. _utils

#######################################
# Interactive git reset --hard to previous commits
# Arguments:
#   None
# Outputs:
#   None
#######################################

# Check if we're in a git repository
check_git_repo() {
    if ! is_git_repo; then
        error_exit "Not in a git repository"
    fi
}

# Get commit info with color formatting
get_commit_info() {
    local commit_hash="$1"
    # Get the commit info using git log
    local full_info=$(git log --oneline -1 "$commit_hash" --format="%s (%cr) %an" 2>/dev/null)
    
    # Split the info into parts for coloring
    local subject=$(echo "$full_info" | sed 's/ (.*) .*$//')
    local date_author=$(echo "$full_info" | sed 's/^.* (/(/')
    
    # Return with color formatting
    echo "${BLUE}$subject${NC} ${GREEN}$date_author${NC}"
}

# Interactive commit selection with arrow keys
interactive_commit_selection() {
    local commits=($(git log --oneline -5 --format="%H"))
    local current_commit=$(git rev-parse HEAD)
    local selected=0
    local total=${#commits[@]}
    
    # Hide cursor
    tput civis
    
    # Function to display menu
    display_menu() {
        # Clear the menu area
        for ((i=0; i<$((total + 3)); i++)); do
            echo -ne "\033[K"  # Clear line
            tput cuu1
        done
        
        echo -e "${BBLUE}Select commit to reset to (WARNING: This will lose uncommitted changes):${NC}"
        echo "Use ↑/↓ arrows, Enter to select, q to quit"
        echo "=========================================="
        
        # Show commits with same formatting as git log output
        for i in "${!commits[@]}"; do
            local commit="${commits[$i]}"
            local short_hash=$(git rev-parse --short "$commit")
            local commit_info=$(get_commit_info "$commit")
            
            if [ "$i" -eq "$selected" ]; then
                echo -e "${GREEN}→ ${YELLOW}$short_hash${NC}  - $commit_info"
            else
                echo -e "  ${YELLOW}$short_hash${NC}  - $commit_info"
            fi
        done
    }
    
    # Initial display
    echo -e "${BBLUE}Select commit to reset to (WARNING: This will lose uncommitted changes):${NC}"
    echo "Use ↑/↓ arrows, Enter to select, q to quit"
    echo "=========================================="
    
    # Show initial menu
    for i in "${!commits[@]}"; do
        local commit="${commits[$i]}"
        local short_hash=$(git rev-parse --short "$commit")
        local commit_info=$(get_commit_info "$commit")
        
        if [ "$i" -eq "$selected" ]; then
            echo -e "${GREEN}→ ${YELLOW}$short_hash${NC}  - $commit_info"
        else
            echo -e "  ${YELLOW}$short_hash${NC}  - $commit_info"
        fi
    done
    
    # Main selection loop
    while true; do
        # Read key input
        read -rsn1 key
        
        # Handle escape sequences
        if [ "$key" = $'\x1b' ]; then
            read -rsn2 key
            case "$key" in
                '[A') # Up arrow
                    if [ $selected -gt 0 ]; then
                        ((selected--))
                        display_menu
                    fi
                    ;;
                '[B') # Down arrow
                    if [ $selected -lt $((total - 1)) ]; then
                        ((selected++))
                        display_menu
                    fi
                    ;;
            esac
        else
            # Handle single character keys
            case "$key" in
                $'\x0d'|$'\x0a'|'') # Enter key (various forms)
                    local selected_commit="${commits[$selected]}"
                    local short_hash=$(git rev-parse --short "$selected_commit")
                    tput cnorm
                    echo ""
                    
                    if [ "$selected_commit" = "$current_commit" ]; then
                        echo -e "${YELLOW}Already at commit: $short_hash${NC}"
                    else
                        echo -e "${RED}WARNING: This will reset to commit: ${YELLOW}$short_hash${NC}"
                        echo -e "${RED}All uncommitted changes will be lost!${NC}"
                        echo -n "Are you sure? (y/N): "
                        read -r confirm
                        
                        if [[ "$confirm" =~ ^[Yy]$ ]]; then
                            echo -e "${GREEN}Resetting to commit: ${YELLOW}$short_hash${NC}"
                            git reset --hard "$selected_commit"
                        else
                            echo -e "${YELLOW}Reset cancelled${NC}"
                        fi
                    fi
                    return 0
                    ;;
                q|Q) # Quit
                    tput cnorm
                    echo ""
                    echo -e "${YELLOW}Exiting...${NC}"
                    return 0
                    ;;
            esac
        fi
    done
}

# Main function
main() {
    # Check if we're in a git repository
    check_git_repo
    
    # Check if terminal supports interactive features
    if [ -t 0 ] && [ -t 1 ]; then
        # Use interactive selection
        interactive_commit_selection
    else
        # Fallback to original select method
        echo -e "${BBLUE}Last 5 commits:${NC}"
        echo "$(git log --oneline -5 --format='%1B[1;33m%h%1B[m  - %(contents:subject) %1B[0;32m(%(committerdate:relative)) %(authorname)%1B[m')"
        echo -e "${BBLUE}============================================================================${NC}"
        
        PS3="Select commit to reset to: "
        eval "$(git log --oneline -5 --format='commits+=(%(H))')"
        echo "Git reset --hard options:"
        
        select commit in "${commits[@]}"; do
            if [[ "$REPLY" == 'q' || "$REPLY" == 'Q' ]]; then
                echo -e "${YELLOW}Exiting...${NC}"
                break
            fi
            
            if [[ -z "$commit" ]]; then
                echo -e "${RED}Invalid option: $REPLY${NC}"
                continue
            fi
            
            local current_commit=$(git rev-parse HEAD)
            local short_hash=$(git rev-parse --short "$commit")
            
            if [ "$commit" = "$current_commit" ]; then
                echo -e "${YELLOW}Already at commit: $short_hash${NC}"
            else
                echo -e "${RED}WARNING: This will reset to commit: ${YELLOW}$short_hash${NC}"
                echo -e "${RED}All uncommitted changes will be lost!${NC}"
                echo -n "Are you sure? (y/N): "
                read -r confirm
                
                if [[ "$confirm" =~ ^[Yy]$ ]]; then
                    echo -e "${GREEN}Resetting to commit: ${YELLOW}$short_hash${NC}"
                    git reset --hard "$commit"
                else
                    echo -e "${YELLOW}Reset cancelled${NC}"
                fi
            fi
            break
        done
    fi
}

# Execute main function
main 