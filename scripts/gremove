#!/bin/bash

# Git Commit Removal Script
# This script provides different ways to remove a specific git commit

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BBLUE='\033[1;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -s, --soft     Remove commit via interactive rebase"
    echo "  -m, --mixed    Remove commit via interactive rebase"
    echo "  -h, --hard     Remove commit via interactive rebase [default]"
    echo "  -r, --revert   Create a revert commit (preserves history)"
    echo "  -i, --interactive Interactive rebase to remove commit"
    echo "  -l, --list     List recent commits"
    echo "  -h, --help     Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                    # Remove commit via interactive rebase (default)"
    echo "  $0 -s                 # Remove commit via interactive rebase"
    echo "  $0 -m                 # Remove commit via interactive rebase"
    echo "  $0 -r                 # Create revert commit (preserves history)"
    echo "  $0 -i                 # Interactive rebase"
    echo "  $0 -l                 # List recent commits"
}

# Function to list recent commits
list_commits() {
    print_info "Recent commits:"
    echo ""
    git log --oneline -5
    echo ""
}

# Function to check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        print_error "Not in a git repository!"
        exit 1
    fi
}

# Function to check if commit exists
check_commit() {
    local commit_hash=$1
    if ! git rev-parse --verify "$commit_hash" > /dev/null 2>&1; then
        print_error "Commit $commit_hash does not exist!"
        exit 1
    fi
}

# Function to confirm action
confirm_action() {
    local action=$1
    local commit_hash=$2
    
    echo ""
    print_warning "About to perform: $action"
    print_info "Commit: $commit_hash"
    print_info "Commit message: $(git log --format=%B -n 1 $commit_hash)"
    echo ""
    read -p "Are you sure you want to continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Operation cancelled."
        exit 0
    fi
}

# Get commit info with color formatting
get_commit_info() {
    local commit_hash="$1"
    # Get the commit info using git log
    local full_info=$(git log --oneline -1 "$commit_hash" --format="%s (%cr) %an" 2>/dev/null)
    
    # Split the info into parts for coloring
    local subject=$(echo "$full_info" | sed 's/ (.*) .*$//')
    local date_author=$(echo "$full_info" | sed 's/^.* (/(/')
    
    # Return with color formatting
    echo "${BLUE}$subject${NC} ${GREEN}$date_author${NC}"
}

# Interactive commit selection with arrow keys
interactive_commit_selection() {
    local reset_type="$1"
    local commits=($(git log --oneline -5 --format="%H"))
    local selected=0
    local total=${#commits[@]}
    
    # Hide cursor
    tput civis
    
    # Function to display menu
    display_menu() {
        # Clear the menu area
        for ((i=0; i<$((total + 3)); i++)); do
            echo -ne "\033[K"  # Clear line
            tput cuu1
        done
        
        echo -e "${BBLUE}Select commit to remove (${reset_type}):${NC}"
        echo "Use ↑/↓ arrows, Enter to select, q to quit"
        echo "=========================================="
        
        # Show commits with same formatting as git log output
        for i in "${!commits[@]}"; do
            local commit="${commits[$i]}"
            local short_hash=$(git rev-parse --short "$commit")
            local commit_info=$(get_commit_info "$commit")
            
            if [ "$i" -eq "$selected" ]; then
                echo -e "${GREEN}→ ${YELLOW}$short_hash${NC}  - $commit_info"
            else
                echo -e "  ${YELLOW}$short_hash${NC}  - $commit_info"
            fi
        done
    }
    
    # Initial display
    echo -e "${BBLUE}Select commit to remove (${reset_type}):${NC}"
    echo "Use ↑/↓ arrows, Enter to select, q to quit"
    echo "=========================================="
    
    # Show initial menu
    for i in "${!commits[@]}"; do
        local commit="${commits[$i]}"
        local short_hash=$(git rev-parse --short "$commit")
        local commit_info=$(get_commit_info "$commit")
        
        if [ "$i" -eq "$selected" ]; then
            echo -e "${GREEN}→ ${YELLOW}$short_hash${NC}  - $commit_info"
        else
            echo -e "  ${YELLOW}$short_hash${NC}  - $commit_info"
        fi
    done
    
    # Main selection loop
    while true; do
        # Read key input
        read -rsn1 key
        
        # Handle escape sequences
        if [ "$key" = $'\x1b' ]; then
            read -rsn2 key
            case "$key" in
                '[A') # Up arrow
                    if [ $selected -gt 0 ]; then
                        ((selected--))
                        display_menu
                    fi
                    ;;
                '[B') # Down arrow
                    if [ $selected -lt $((total - 1)) ]; then
                        ((selected++))
                        display_menu
                    fi
                    ;;
            esac
        else
            # Handle single character keys
            case "$key" in
                $'\x0d'|$'\x0a'|'') # Enter key (various forms)
                    local selected_commit="${commits[$selected]}"
                    local short_hash=$(git rev-parse --short "$selected_commit")
                    tput cnorm
                    echo ""
                    
                    # Confirm action
                    confirm_action "$reset_type" "$short_hash"
                    
                    # Perform the action
                    case $reset_type in
                        "soft reset")
                            print_info "Performing interactive rebase to remove $short_hash..."
                            print_info "In the editor, change 'pick' to 'drop' for the commit you want to remove."
                            git rebase -i "$selected_commit"^
                            print_success "Commit removed via interactive rebase."
                            ;;
                        "mixed reset")
                            print_info "Performing interactive rebase to remove $short_hash..."
                            print_info "In the editor, change 'pick' to 'drop' for the commit you want to remove."
                            git rebase -i "$selected_commit"^
                            print_success "Commit removed via interactive rebase."
                            ;;
                        "hard reset")
                            print_info "Performing interactive rebase to remove $short_hash..."
                            print_info "In the editor, change 'pick' to 'drop' for the commit you want to remove."
                            git rebase -i "$selected_commit"^
                            print_success "Commit removed via interactive rebase."
                            ;;
                        "revert commit")
                            print_info "Creating revert commit for $short_hash..."
                            git revert "$selected_commit" --no-edit
                            print_success "Revert commit created."
                            ;;
                        "interactive rebase")
                            print_info "Starting interactive rebase..."
                            print_info "In the editor, change 'pick' to 'drop' for the commit you want to remove."
                            git rebase -i "$selected_commit"^
                            print_success "Interactive rebase completed."
                            ;;
                        *)
                            print_error "Unknown reset type: $reset_type"
                            exit 1
                            ;;
                    esac
                    
                    # Show current status
                    echo ""
                    print_info "Current status:"
                    git status --short
                    echo ""
                    print_info "Recent commits:"
                    git log --oneline -5
                    
                    return 0
                    ;;
                q|Q) # Quit
                    tput cnorm
                    echo ""
                    echo -e "${YELLOW}Exiting...${NC}"
                    return 0
                    ;;
            esac
        fi
    done
}

# Main script logic
main() {
    local reset_type="hard reset"
    local action=""
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -s|--soft)
                reset_type="soft reset"
                action="soft reset"
                shift
                ;;
            -m|--mixed)
                reset_type="mixed reset"
                action="mixed reset"
                shift
                ;;
            -h|--hard)
                reset_type="hard reset"
                action="hard reset"
                shift
                ;;
            -r|--revert)
                reset_type="revert commit"
                action="revert commit"
                shift
                ;;
            -i|--interactive)
                reset_type="interactive rebase"
                action="interactive rebase"
                shift
                ;;
            -l|--list)
                list_commits
                exit 0
                ;;
            --help)
                show_usage
                exit 0
                ;;
            -*)
                print_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
            *)
                print_error "Unexpected argument: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Check if we're in a git repository
    check_git_repo
    
    # Check if terminal supports interactive features
    if [ -t 0 ] && [ -t 1 ]; then
        # Use interactive selection
        interactive_commit_selection "$reset_type"
    else
        # Fallback to original select method
        echo -e "${BBLUE}Last 5 commits:${NC}"
        echo "$(git log --oneline -5 --format='%1B[1;33m%h%1B[m  - %(contents:subject) %1B[0;32m(%(committerdate:relative)) %(authorname)%1B[m')"
        echo -e "${BBLUE}============================================================================${NC}"
        
        PS3="Select commit to remove: "
        eval "$(git log --oneline -5 --format='commits+=(%(H))')"
        echo "Git remove options:"
        
        select commit in "${commits[@]}"; do
            if [[ "$REPLY" == 'q' || "$REPLY" == 'Q' ]]; then
                echo -e "${YELLOW}Exiting...${NC}"
                break
            fi
            
            if [[ -z "$commit" ]]; then
                echo -e "${RED}Invalid option: $REPLY${NC}"
                continue
            fi
            
            local short_hash=$(git rev-parse --short "$commit")
            
            # Confirm action
            confirm_action "$reset_type" "$short_hash"
            
            # Perform the action
            case $reset_type in
                "soft reset")
                    print_info "Performing interactive rebase to remove $short_hash..."
                    print_info "In the editor, change 'pick' to 'drop' for the commit you want to remove."
                    git rebase -i "$commit"^
                    print_success "Commit removed via interactive rebase."
                    ;;
                "mixed reset")
                    print_info "Performing interactive rebase to remove $short_hash..."
                    print_info "In the editor, change 'pick' to 'drop' for the commit you want to remove."
                    git rebase -i "$commit"^
                    print_success "Commit removed via interactive rebase."
                    ;;
                "hard reset")
                    print_info "Performing interactive rebase to remove $short_hash..."
                    print_info "In the editor, change 'pick' to 'drop' for the commit you want to remove."
                    git rebase -i "$commit"^
                    print_success "Commit removed via interactive rebase."
                    ;;
                "revert commit")
                    print_info "Creating revert commit for $short_hash..."
                    git revert "$commit" --no-edit
                    print_success "Revert commit created."
                    ;;
                "interactive rebase")
                    print_info "Starting interactive rebase..."
                    print_info "In the editor, change 'pick' to 'drop' for the commit you want to remove."
                    git rebase -i "$commit"^
                    print_success "Interactive rebase completed."
                    ;;
                *)
                    print_error "Unknown reset type: $reset_type"
                    exit 1
                    ;;
            esac
            
            # Show current status
            echo ""
            print_info "Current status:"
            git status --short
            echo ""
            print_info "Recent commits:"
            git log --oneline -5
            
            break
        done
    fi
}

# Run main function with all arguments
main "$@" 